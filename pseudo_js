//create server.js file
    connect to server

//create app js file with code to add and update information into employee_tracker_db

function init() {
    const initQuest = {
      type: "list",
      name: "start",
      message: "What would you like to do?",
      choices: ["View All Employees", "View All Employees By Department", "View All Employees By Manager", 
      "Add Employee", "Remove Employee", "Update Employee Role", "Update Employee Manager"]
    }
    .then(function(response) {
        switch (response.action) {

        case "View All Employees":
        displayEmployees();
        break;

        case "View All Employees By Department":
        displayEmByDep();
        break;

        case "View All Employees By Manager":
        displayManagers();
        break;

        case "Add Employee":
        addEmployee();
        break;

        case "Remove Employee":
        removeEmployee();
        break;

        case "Update Employee Role":
        updateEmpRole();
        break;

        case "Update Employee Manager":
        updateEmpManager();
        break;
  };

function displayEmployees(){
    connection.query(SELECT * FROM employee)
}

function displayEmByDep(){
    var query = "SELECT 
    connection.query(SELECT * FROM department)
}

function displayManagers(){
    connection.query(SELECT * FROM employee WHERE )
}

function addEmployee(){
    connection.query(
    INSERT INTO employee (first_name, last_name, role_id, manager_id)
    VALUES ()
}

function removeEmployee(){
    connection.query()
}

function updateEmpRole(){
    connection.query()
}

function updateEmpManager(){
    connection.query()
}

    let managers = data.map(function (element) {
      return{
        id: `${element.id}`,
        name: `${element.first_name} ${element.last_name}`,
        role_id: `${element.role_id}`,
        manager_id: `${element.manager_id}`
      }

       


